module attributes {gpu.container_module} {
  func.func @vadd(%arg0: memref<1024xf32>, %arg1: memref<1024xf32>, %arg2: memref<1024xf32>) {
    %c1 = arith.constant 1 : index
    %c1024 = arith.constant 1024 : index
    gpu.launch_func  @vadd_kernel::@vadd_kernel blocks in (%c1024, %c1, %c1) threads in (%c1, %c1, %c1)  args(%arg0 : memref<1024xf32>, %arg1 : memref<1024xf32>, %arg2 : memref<1024xf32>)
    return
  }
  gpu.module @vadd_kernel {
    gpu.func @vadd_kernel(%arg0: memref<1024xf32>, %arg1: memref<1024xf32>, %arg2: memref<1024xf32>) kernel attributes {gpu.known_block_size = array<i32: 1, 1, 1>, gpu.known_grid_size = array<i32: 1024, 1, 1>} {
      %block_id_x = gpu.block_id  x
      %0 = memref.load %arg0[%block_id_x] : memref<1024xf32>
      %1 = memref.load %arg1[%block_id_x] : memref<1024xf32>
      %2 = arith.addf %0, %1 : f32
      memref.store %2, %arg2[%block_id_x] : memref<1024xf32>
      gpu.return
    }
  }
}
