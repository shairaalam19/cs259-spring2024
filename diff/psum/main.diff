diff --git a/psum/main.cpp b/psum/main.cpp
index 38d5d4d..260e4b3 100644
--- a/psum/main.cpp
+++ b/psum/main.cpp
@@ -17,7 +17,7 @@
 
 ///////////////////////////////////////////////////////////////////////////////
 
-const char* kernel_file = "kernel.bin";
+const char* kernel_file = "kernel.bin"; // load kernel binary to GPU 
 uint32_t count = 0;
 
 std::vector<TYPE> src_data;
@@ -62,9 +62,11 @@ void cleanup() {
   }
 }
 
+// arg num_points: number of points in input
 void gen_input_data(uint32_t num_points) {
   src_data.resize(num_points);
 
+  std::cout << "Input Data" << std::endl;
   for (uint32_t i = 0; i < num_points; ++i) {
     auto r = static_cast<float>(std::rand()) / RAND_MAX;
     auto value = static_cast<TYPE>(r * num_points);
@@ -73,20 +75,31 @@ void gen_input_data(uint32_t num_points) {
   }  
 }
 
+// arg num_points: number of points in destination
 void gen_ref_data(uint32_t num_points) {
   ref_data.resize(num_points);
 
+  int points_per_partition = src_data.size()/num_points;
+
+  std::cout << "Reference Data" << std::endl;
+  // outer loop filling each point of ref data
   for (uint32_t i = 0; i < num_points; ++i) {
-    TYPE ref_value = src_data.at(i);
-    uint32_t pos = 0;
-    for (uint32_t j = 0; j < num_points; ++j) {
-      TYPE cur_value = src_data.at(j);
-      pos += (cur_value < ref_value) || (cur_value == ref_value && j < i);
+    TYPE sum = 0;
+    // inner loop going through all points of a partition
+    for (uint32_t j = 0; j < points_per_partition; ++j) {
+
+      int index = (i*points_per_partition) + j;
+      TYPE curr = src_data.at(index);
+      sum = sum + curr;
+
     }
-    ref_data.at(pos) = ref_value;
+
+    ref_data.at(i) = sum;
+    std::cout << std::dec << i << ": value=" << sum << std::endl;
   }
 }
 
+// arg num_points: number of points in destination
 int run_test(const kernel_arg_t& kernel_arg,
              uint32_t buf_size, 
              uint32_t num_points) {
@@ -131,43 +144,74 @@ int main(int argc, char *argv[]) {
   parse_args(argc, argv);
 
   if (count == 0) {
-    count = 1;
+    count = 24; // just a default input size in case nothing is specified.
   }
 
   std::srand(50);
 
+  /**
+   * @brief calculates the num points and buffer size based on num size 
+   * 
+   */
+
+  uint32_t num_total_points = count; // total input size
+  std::cout << "Total number of points in input: " << num_total_points << std::endl;
+
+  // generate input data
+  gen_input_data(num_total_points); // src_data now has these many points with random values initialized
+
+  uint32_t src_buf_size = src_data.size() * sizeof(int32_t);
+  std::cout << "Source buffer size: " << src_buf_size << " bytes" << std::endl;
+
+
   // open device connection
   std::cout << "open device connection" << std::endl;  
   RT_CHECK(vx_dev_open(&device));
 
-  uint32_t num_points = count;
+  // calculating good destination size by querying the device
+  uint64_t num_cores, num_warps, num_threads;
+  RT_CHECK(vx_dev_caps(device, VX_CAPS_NUM_CORES, &num_cores)); // # of cores
+  RT_CHECK(vx_dev_caps(device, VX_CAPS_NUM_WARPS, &num_warps)); // # of warps 
+  RT_CHECK(vx_dev_caps(device, VX_CAPS_NUM_THREADS, &num_threads)); // # of threads
 
-  // generate input data
-  gen_input_data(num_points);
 
-  // generate reference data
-  gen_ref_data(num_points);
+  std::cout << "Device configuration [cores, warps, threads]: " << num_cores << ", " << num_warps << ", " << num_threads << std::endl;
 
-  uint32_t src_buf_size = src_data.size() * sizeof(int32_t);  
-  uint32_t dst_buf_size = ref_data.size() * sizeof(int32_t);
+  uint32_t num_tasks  = num_cores * num_warps * num_threads;
+  // num_tasks is the total number of hardware threads
+  // So we will use same number of logical threads for efficiency
+  // This will be equal to number of points in destination
 
-  std::cout << "number of points: " << num_points << std::endl;
-  std::cout << "buffer size: " << dst_buf_size << " bytes" << std::endl;
+
+  std::cout << "Total number of points in output: " << num_tasks << std::endl;
+  // Now using src_data and destination size we can calculate the reference data (ground truth)
+  gen_ref_data(num_tasks);
+
+  uint32_t dst_buf_size = ref_data.size() * sizeof(TYPE);
+  std::cout << "Destination buffer size: " << dst_buf_size << " bytes" << std::endl;
+
+
+  // Dividing work between the threads
+  uint32_t num_points = num_total_points/num_tasks; // size of partition - each thread will work on this - each destination value will be a sum of this chunk of points
+  
 
   // upload program
   std::cout << "upload program" << std::endl;  
   RT_CHECK(vx_upload_kernel_file(device, kernel_file));
 
-  // allocate device memory
+  // allocate device memory for source and destination and filling up their device addresses into kernel_arg.
   std::cout << "allocate device memory" << std::endl;
   RT_CHECK(vx_mem_alloc(device, src_buf_size, VX_MEM_TYPE_GLOBAL, &kernel_arg.src_addr));
   RT_CHECK(vx_mem_alloc(device, dst_buf_size, VX_MEM_TYPE_GLOBAL, &kernel_arg.dst_addr));
 
-  kernel_arg.num_points = num_points;
-
   std::cout << "dev_src=0x" << std::hex << kernel_arg.src_addr << std::endl;
   std::cout << "dev_dst=0x" << std::hex << kernel_arg.dst_addr << std::endl;
-  
+
+  // Filling up the other kernel_arg attributes
+  kernel_arg.num_points = num_points; // number of points per partition of input
+  kernel_arg.num_tasks = num_tasks; // number of logical threads = number of hardware threads = destination size
+
+
   // allocate staging buffer  
   {
     std::cout << "allocate staging buffer" << std::endl;    
@@ -179,14 +223,14 @@ int main(int argc, char *argv[]) {
   
   // upload kernel argument  
   std::cout << "upload kernel argument" << std::endl;
-  memcpy(staging_buf.data(), &kernel_arg, sizeof(kernel_arg_t));
-  RT_CHECK(vx_copy_to_dev(device, KERNEL_ARG_DEV_MEM_ADDR, staging_buf.data(), sizeof(kernel_arg_t)));
+  memcpy(staging_buf.data(), &kernel_arg, sizeof(kernel_arg_t)); // upload into GPU 
+  RT_CHECK(vx_copy_to_dev(device, KERNEL_ARG_DEV_MEM_ADDR, staging_buf.data(), sizeof(kernel_arg_t))); // determine based on location and access it 
   
   // upload source buffer
   {
     std::cout << "upload source buffer" << std::endl;
     auto buf_ptr = staging_buf.data();
-    memcpy(buf_ptr, src_data.data(), num_points * sizeof(TYPE));      
+    memcpy(buf_ptr, src_data.data(), num_total_points * sizeof(TYPE));      
     RT_CHECK(vx_copy_to_dev(device, kernel_arg.src_addr, staging_buf.data(), src_buf_size));
   }
 
@@ -194,7 +238,7 @@ int main(int argc, char *argv[]) {
   {
     std::cout << "clear destination buffer" << std::endl;
     auto buf_ptr = (int32_t*)staging_buf.data();
-    for (uint32_t i = 0; i < num_points; ++i) {
+    for (uint32_t i = 0; i < num_tasks; ++i) {
       buf_ptr[i] = 0xdeadbeef;
     }    
     RT_CHECK(vx_copy_to_dev(device, kernel_arg.dst_addr, staging_buf.data(), dst_buf_size));  
@@ -202,7 +246,7 @@ int main(int argc, char *argv[]) {
 
   // run tests
   std::cout << "run tests" << std::endl;
-  RT_CHECK(run_test(kernel_arg, dst_buf_size, num_points));
+  RT_CHECK(run_test(kernel_arg, dst_buf_size, num_tasks));
 
   // cleanup
   std::cout << "cleanup" << std::endl;  
